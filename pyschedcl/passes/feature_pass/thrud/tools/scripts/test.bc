; ModuleID = '../../../tests/polybench/OpenCL/2DCONV/2DConvolution.cl'
target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spir"

; Function Attrs: nounwind
define void @Convolution2D_kernel(float addrspace(1)* %A, float addrspace(1)* %B, i32 %ni, i32 %nj) #0 {
entry:
  %A.addr = alloca float addrspace(1)*, align 4
  %B.addr = alloca float addrspace(1)*, align 4
  %ni.addr = alloca i32, align 4
  %nj.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %c11 = alloca float, align 4
  %c12 = alloca float, align 4
  %c13 = alloca float, align 4
  %c21 = alloca float, align 4
  %c22 = alloca float, align 4
  %c23 = alloca float, align 4
  %c31 = alloca float, align 4
  %c32 = alloca float, align 4
  %c33 = alloca float, align 4
  store float addrspace(1)* %A, float addrspace(1)** %A.addr, align 4
  store float addrspace(1)* %B, float addrspace(1)** %B.addr, align 4
  store i32 %ni, i32* %ni.addr, align 4
  store i32 %nj, i32* %nj.addr, align 4
  %call = call i32 @get_global_id(i32 0) #3
  store i32 %call, i32* %j, align 4
  %call1 = call i32 @get_global_id(i32 1) #3
  store i32 %call1, i32* %i, align 4
  store float 0x3FC99999A0000000, float* %c11, align 4
  store float 5.000000e-01, float* %c21, align 4
  store float 0xBFE99999A0000000, float* %c31, align 4
  store float 0xBFD3333340000000, float* %c12, align 4
  store float 0x3FE3333340000000, float* %c22, align 4
  store float 0xBFECCCCCC0000000, float* %c32, align 4
  store float 0x3FD99999A0000000, float* %c13, align 4
  store float 0x3FE6666660000000, float* %c23, align 4
  store float 0x3FB99999A0000000, float* %c33, align 4
  %0 = load i32* %i, align 4
  %1 = load i32* %ni.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32* %j, align 4
  %3 = load i32* %nj.addr, align 4
  %sub2 = sub nsw i32 %3, 1
  %cmp3 = icmp slt i32 %2, %sub2
  br i1 %cmp3, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %4 = load i32* %i, align 4
  %cmp5 = icmp sgt i32 %4, 0
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %5 = load i32* %j, align 4
  %cmp7 = icmp sgt i32 %5, 0
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true6
  %6 = load float* %c11, align 4
  %7 = load i32* %i, align 4
  %sub8 = sub nsw i32 %7, 1
  %8 = load i32* %nj.addr, align 4
  %mul = mul nsw i32 %sub8, %8
  %9 = load i32* %j, align 4
  %sub9 = sub nsw i32 %9, 1
  %add = add nsw i32 %mul, %sub9
  %10 = load float addrspace(1)** %A.addr, align 4
  %arrayidx = getelementptr inbounds float addrspace(1)* %10, i32 %add
  %11 = load float addrspace(1)* %arrayidx, align 4
  %12 = load float* %c12, align 4
  %13 = load i32* %i, align 4
  %add11 = add nsw i32 %13, 0
  %14 = load i32* %nj.addr, align 4
  %mul12 = mul nsw i32 %add11, %14
  %15 = load i32* %j, align 4
  %sub13 = sub nsw i32 %15, 1
  %add14 = add nsw i32 %mul12, %sub13
  %16 = load float addrspace(1)** %A.addr, align 4
  %arrayidx15 = getelementptr inbounds float addrspace(1)* %16, i32 %add14
  %17 = load float addrspace(1)* %arrayidx15, align 4
  %mul16 = fmul float %12, %17
  %18 = call float @llvm.fmuladd.f32(float %6, float %11, float %mul16)
  %19 = load float* %c13, align 4
  %20 = load i32* %i, align 4
  %add17 = add nsw i32 %20, 1
  %21 = load i32* %nj.addr, align 4
  %mul18 = mul nsw i32 %add17, %21
  %22 = load i32* %j, align 4
  %sub19 = sub nsw i32 %22, 1
  %add20 = add nsw i32 %mul18, %sub19
  %23 = load float addrspace(1)** %A.addr, align 4
  %arrayidx21 = getelementptr inbounds float addrspace(1)* %23, i32 %add20
  %24 = load float addrspace(1)* %arrayidx21, align 4
  %25 = call float @llvm.fmuladd.f32(float %19, float %24, float %18)
  %26 = load float* %c21, align 4
  %27 = load i32* %i, align 4
  %sub23 = sub nsw i32 %27, 1
  %28 = load i32* %nj.addr, align 4
  %mul24 = mul nsw i32 %sub23, %28
  %29 = load i32* %j, align 4
  %add25 = add nsw i32 %29, 0
  %add26 = add nsw i32 %mul24, %add25
  %30 = load float addrspace(1)** %A.addr, align 4
  %arrayidx27 = getelementptr inbounds float addrspace(1)* %30, i32 %add26
  %31 = load float addrspace(1)* %arrayidx27, align 4
  %32 = call float @llvm.fmuladd.f32(float %26, float %31, float %25)
  %33 = load float* %c22, align 4
  %34 = load i32* %i, align 4
  %add29 = add nsw i32 %34, 0
  %35 = load i32* %nj.addr, align 4
  %mul30 = mul nsw i32 %add29, %35
  %36 = load i32* %j, align 4
  %add31 = add nsw i32 %36, 0
  %add32 = add nsw i32 %mul30, %add31
  %37 = load float addrspace(1)** %A.addr, align 4
  %arrayidx33 = getelementptr inbounds float addrspace(1)* %37, i32 %add32
  %38 = load float addrspace(1)* %arrayidx33, align 4
  %39 = call float @llvm.fmuladd.f32(float %33, float %38, float %32)
  %40 = load float* %c23, align 4
  %41 = load i32* %i, align 4
  %add35 = add nsw i32 %41, 1
  %42 = load i32* %nj.addr, align 4
  %mul36 = mul nsw i32 %add35, %42
  %43 = load i32* %j, align 4
  %add37 = add nsw i32 %43, 0
  %add38 = add nsw i32 %mul36, %add37
  %44 = load float addrspace(1)** %A.addr, align 4
  %arrayidx39 = getelementptr inbounds float addrspace(1)* %44, i32 %add38
  %45 = load float addrspace(1)* %arrayidx39, align 4
  %46 = call float @llvm.fmuladd.f32(float %40, float %45, float %39)
  %47 = load float* %c31, align 4
  %48 = load i32* %i, align 4
  %sub41 = sub nsw i32 %48, 1
  %49 = load i32* %nj.addr, align 4
  %mul42 = mul nsw i32 %sub41, %49
  %50 = load i32* %j, align 4
  %add43 = add nsw i32 %50, 1
  %add44 = add nsw i32 %mul42, %add43
  %51 = load float addrspace(1)** %A.addr, align 4
  %arrayidx45 = getelementptr inbounds float addrspace(1)* %51, i32 %add44
  %52 = load float addrspace(1)* %arrayidx45, align 4
  %53 = call float @llvm.fmuladd.f32(float %47, float %52, float %46)
  %54 = load float* %c32, align 4
  %55 = load i32* %i, align 4
  %add47 = add nsw i32 %55, 0
  %56 = load i32* %nj.addr, align 4
  %mul48 = mul nsw i32 %add47, %56
  %57 = load i32* %j, align 4
  %add49 = add nsw i32 %57, 1
  %add50 = add nsw i32 %mul48, %add49
  %58 = load float addrspace(1)** %A.addr, align 4
  %arrayidx51 = getelementptr inbounds float addrspace(1)* %58, i32 %add50
  %59 = load float addrspace(1)* %arrayidx51, align 4
  %60 = call float @llvm.fmuladd.f32(float %54, float %59, float %53)
  %61 = load float* %c33, align 4
  %62 = load i32* %i, align 4
  %add53 = add nsw i32 %62, 1
  %63 = load i32* %nj.addr, align 4
  %mul54 = mul nsw i32 %add53, %63
  %64 = load i32* %j, align 4
  %add55 = add nsw i32 %64, 1
  %add56 = add nsw i32 %mul54, %add55
  %65 = load float addrspace(1)** %A.addr, align 4
  %arrayidx57 = getelementptr inbounds float addrspace(1)* %65, i32 %add56
  %66 = load float addrspace(1)* %arrayidx57, align 4
  %67 = call float @llvm.fmuladd.f32(float %61, float %66, float %60)
  %68 = load i32* %i, align 4
  %69 = load i32* %nj.addr, align 4
  %mul59 = mul nsw i32 %68, %69
  %70 = load i32* %j, align 4
  %add60 = add nsw i32 %mul59, %70
  %71 = load float addrspace(1)** %B.addr, align 4
  %arrayidx61 = getelementptr inbounds float addrspace(1)* %71, i32 %add60
  store float %67, float addrspace(1)* %arrayidx61, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true4, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @get_global_id(i32) #1

; Function Attrs: nounwind readnone
declare float @llvm.fmuladd.f32(float, float, float) #2

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nobuiltin nounwind readnone }

!opencl.kernels = !{!0}
!llvm.ident = !{!1}

!0 = metadata !{void (float addrspace(1)*, float addrspace(1)*, i32, i32)* @Convolution2D_kernel}
!1 = metadata !{metadata !"clang version 3.5.0 "}
